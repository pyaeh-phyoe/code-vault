{
  "version": 3,
  "sources": ["../../colors-named/src/index.ts", "../../colors-named-hex/src/index.ts", "../../hsl-matcher/src/index.ts", "../../@uiw/codemirror-extensions-color/src/utils.ts", "../../@uiw/codemirror-extensions-color/src/index.ts"],
  "sourcesContent": ["/**\n * A array with color names. Based on https://www.w3.org/TR/css-color-4/#named-colors\n */\nconst names = [\n  'aliceblue',\n  'antiquewhite',\n  'aqua',\n  'aquamarine',\n  'azure',\n  'beige',\n  'bisque',\n  'black',\n  'blanchedalmond',\n  'blue',\n  'blueviolet',\n  'brown',\n  'burlywood',\n  'cadetblue',\n  'chartreuse',\n  'chocolate',\n  'coral',\n  'cornflowerblue',\n  'cornsilk',\n  'crimson',\n  'cyan',\n  'darkblue',\n  'darkcyan',\n  'darkgoldenrod',\n  'darkgray',\n  'darkgreen',\n  'darkgrey',\n  'darkkhaki',\n  'darkmagenta',\n  'darkolivegreen',\n  'darkorange',\n  'darkorchid',\n  'darkred',\n  'darksalmon',\n  'darkseagreen',\n  'darkslateblue',\n  'darkslategray',\n  'darkslategrey',\n  'darkturquoise',\n  'darkviolet',\n  'deeppink',\n  'deepskyblue',\n  'dimgray',\n  'dimgrey',\n  'dodgerblue',\n  'firebrick',\n  'floralwhite',\n  'forestgreen',\n  'fuchsia',\n  'gainsboro',\n  'ghostwhite',\n  'gold',\n  'goldenrod',\n  'gray',\n  'green',\n  'greenyellow',\n  'grey',\n  'honeydew',\n  'hotpink',\n  'indianred',\n  'indigo',\n  'ivory',\n  'khaki',\n  'lavender',\n  'lavenderblush',\n  'lawngreen',\n  'lemonchiffon',\n  'lightblue',\n  'lightcoral',\n  'lightcyan',\n  'lightgoldenrodyellow',\n  'lightgray',\n  'lightgreen',\n  'lightgrey',\n  'lightpink',\n  'lightsalmon',\n  'lightseagreen',\n  'lightskyblue',\n  'lightslategray',\n  'lightslategrey',\n  'lightsteelblue',\n  'lightyellow',\n  'lime',\n  'limegreen',\n  'linen',\n  'magenta',\n  'maroon',\n  'mediumaquamarine',\n  'mediumblue',\n  'mediumorchid',\n  'mediumpurple',\n  'mediumseagreen',\n  'mediumslateblue',\n  'mediumspringgreen',\n  'mediumturquoise',\n  'mediumvioletred',\n  'midnightblue',\n  'mintcream',\n  'mistyrose',\n  'moccasin',\n  'navajowhite',\n  'navy',\n  'oldlace',\n  'olive',\n  'olivedrab',\n  'orange',\n  'orangered',\n  'orchid',\n  'palegoldenrod',\n  'palegreen',\n  'paleturquoise',\n  'palevioletred',\n  'papayawhip',\n  'peachpuff',\n  'peru',\n  'pink',\n  'plum',\n  'powderblue',\n  'purple',\n  'rebeccapurple',\n  'red',\n  'rosybrown',\n  'royalblue',\n  'saddlebrown',\n  'salmon',\n  'sandybrown',\n  'seagreen',\n  'seashell',\n  'sienna',\n  'silver',\n  'skyblue',\n  'slateblue',\n  'slategray',\n  'slategrey',\n  'snow',\n  'springgreen',\n  'steelblue',\n  'tan',\n  'teal',\n  'thistle',\n  'tomato',\n  'turquoise',\n  'violet',\n  'wheat',\n  'white',\n  'whitesmoke',\n  'yellow',\n  'yellowgreen',\n] as const;\n\nexport default names;\n", "/**\n * A array with color names. Based on https://www.w3.org/TR/css-color-4/#named-colors\n */\nconst hexs = [\n  '#F0F8FF',\n  '#FAEBD7',\n  '#00FFFF',\n  '#7FFFD4',\n  '#F0FFFF',\n  '#F5F5DC',\n  '#FFE4C4',\n  '#000000',\n  '#FFEBCD',\n  '#0000FF',\n  '#8A2BE2',\n  '#A52A2A',\n  '#DEB887',\n  '#5F9EA0',\n  '#7FFF00',\n  '#D2691E',\n  '#FF7F50',\n  '#6495ED',\n  '#FFF8DC',\n  '#DC143C',\n  '#00FFFF',\n  '#00008B',\n  '#008B8B',\n  '#B8860B',\n  '#A9A9A9',\n  '#006400',\n  '#A9A9A9',\n  '#BDB76B',\n  '#8B008B',\n  '#556B2F',\n  '#FF8C00',\n  '#9932CC',\n  '#8B0000',\n  '#E9967A',\n  '#8FBC8F',\n  '#483D8B',\n  '#2F4F4F',\n  '#2F4F4F',\n  '#00CED1',\n  '#9400D3',\n  '#FF1493',\n  '#00BFFF',\n  '#696969',\n  '#696969',\n  '#1E90FF',\n  '#B22222',\n  '#FFFAF0',\n  '#228B22',\n  '#FF00FF',\n  '#DCDCDC',\n  '#F8F8FF',\n  '#FFD700',\n  '#DAA520',\n  '#808080',\n  '#008000',\n  '#ADFF2F',\n  '#808080',\n  '#F0FFF0',\n  '#FF69B4',\n  '#CD5C5C',\n  '#4B0082',\n  '#FFFFF0',\n  '#F0E68C',\n  '#E6E6FA',\n  '#FFF0F5',\n  '#7CFC00',\n  '#FFFACD',\n  '#ADD8E6',\n  '#F08080',\n  '#E0FFFF',\n  '#FAFAD2',\n  '#D3D3D3',\n  '#90EE90',\n  '#D3D3D3',\n  '#FFB6C1',\n  '#FFA07A',\n  '#20B2AA',\n  '#87CEFA',\n  '#778899',\n  '#778899',\n  '#B0C4DE',\n  '#FFFFE0',\n  '#00FF00',\n  '#32CD32',\n  '#FAF0E6',\n  '#FF00FF',\n  '#800000',\n  '#66CDAA',\n  '#0000CD',\n  '#BA55D3',\n  '#9370DB',\n  '#3CB371',\n  '#7B68EE',\n  '#00FA9A',\n  '#48D1CC',\n  '#C71585',\n  '#191970',\n  '#F5FFFA',\n  '#FFE4E1',\n  '#FFE4B5',\n  '#FFDEAD',\n  '#000080',\n  '#FDF5E6',\n  '#808000',\n  '#6B8E23',\n  '#FFA500',\n  '#FF4500',\n  '#DA70D6',\n  '#EEE8AA',\n  '#98FB98',\n  '#AFEEEE',\n  '#DB7093',\n  '#FFEFD5',\n  '#FFDAB9',\n  '#CD853F',\n  '#FFC0CB',\n  '#DDA0DD',\n  '#B0E0E6',\n  '#800080',\n  '#663399',\n  '#FF0000',\n  '#BC8F8F',\n  '#4169E1',\n  '#8B4513',\n  '#FA8072',\n  '#F4A460',\n  '#2E8B57',\n  '#FFF5EE',\n  '#A0522D',\n  '#C0C0C0',\n  '#87CEEB',\n  '#6A5ACD',\n  '#708090',\n  '#708090',\n  '#FFFAFA',\n  '#00FF7F',\n  '#4682B4',\n  '#D2B48C',\n  '#008080',\n  '#D8BFD8',\n  '#FF6347',\n  '#40E0D0',\n  '#EE82EE',\n  '#F5DEB3',\n  '#FFFFFF',\n  '#F5F5F5',\n  '#FFFF00',\n  '#9ACD32',\n] as const;\n\nexport default hexs;\n", "const MATCHER =\n  /hsla?\\(\\s*(\\+?-?\\d*\\.?\\d*(?:e\\+)?(?:\\d*)?(?:deg|rad|grad|turn)?)\\s*,\\s*(\\+?\\-?\\d*\\.?\\d*(?:e\\+)?(?:\\d*)?%)\\s*,\\s*(\\+?\\-?\\d*\\.?\\d*(?:e\\+)?(?:\\d*)?%)\\s*(,\\s*\\+?\\-?\\s*(?:\\d*\\.?\\d*(?:E-\\d*)?%?)?)?\\s*\\)/i;\nconst MATCHER_SPACE =\n  /hsla?\\(\\s*(\\+?-?\\d*\\.?\\d*(?:e\\+)?(?:\\d*)?(?:deg|rad|grad|turn)?)\\s*(\\+?\\-?\\d*\\.?\\d*(?:e\\+)?(?:\\d*)?%)\\s*(\\+?\\-?\\d*\\.?\\d*(?:e\\+)?(?:\\d*)?%)\\s*(\\/\\s*\\+?\\-?\\s*(?:\\d*\\.?\\d*(?:E-\\d*)?%?)?)?\\s*\\)/i;\n\nconst aStr = (a?: string) => (a ? a.replace(/^(,|\\/)\\s*/, '').trim() : a);\n\nexport interface RGBColor {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface RGBAColor extends RGBColor {\n  a: number;\n}\n\nexport interface HSLObjectStringColor {\n  h: string;\n  s: string;\n  l: string;\n}\n\nexport interface HSLAObjectStringColor extends HSLObjectStringColor {\n  a?: string;\n}\n\n/** Convert HLS string to HLS object or verify whether hls is valid */\nexport default function hslMatcher(hsl: string = ''): HSLAObjectStringColor | undefined {\n  const match = MATCHER.exec(hsl) || MATCHER_SPACE.exec(hsl);\n  if (!!match) {\n    const [_, h, s, l, a] = match;\n    if (a && /^(:?(\\/|,)\\s*-?\\+?)$/.test(a.trim())) return;\n    return {\n      h,\n      s,\n      l,\n      a: aStr(a),\n    };\n  }\n}\n\n/**\n * Convert HSL String to RGB\n *\n * ```js\n * hsl(240, 100%, 50%)                         // ✅ comma separated\n * hsl(240, 100%, 50%, 0.1)                    // ✅ comma separated with opacity\n * hsl(240, 100%, 50%, 10%)                    // ✅ comma separated with % opacity\n * hsl(240, 100%, 50%, 10x)                    // ❌\n * hsl(240,100%,50%,0.1)                       // ✅ comma separated without spaces\n * hsl(180deg, 100%, 50%, 0.1)                 // ✅ hue with 'deg'\n * hsl(3.14rad, 100%, 50%, 0.1)                // ✅ hue with 'rad'\n * hsl(200grad, 100%, 50%, 0.1)                // ✅ hue with 'grad'\n * hsl(0.5turn, 100%, 50%, 0.1)                // ✅ hue with 'turn'\n * hsl(-240, -100%, -50%, -0.1)                // ✅ negative values\n * hsl(+240, +100%, +50%, +0.1)                // ✅ explicit positive sign\n * hsl(240.5, 99.99%, 49.999%, 0.9999)         // ✅ non-integer values\n * hsl(.9, .99%, .999%, .9999)                 // ✅ fraction w/o leading zero\n * hsl(.9, .99%, .999%, )                      // ❌\n * hsl(0240, 0100%, 0050%, 01)                 // ✅ leading zeros\n * hsl(240.0, 100.00%, 50.000%, 1.0000)        // ✅ trailing decimal zeros\n * hsl(2400, 1000%, 1000%, 10)                 // ✅ out of range values\n * hsl(-2400.01deg, -1000.5%, -1000.05%, -100) // ✅ combination of above\n * hsl(2.40e+2, 1.00e+2%, 5.00e+1%, 1E-3)      // ✅ scientific notation\n * hsl(240 100% 50%)                           // ✅ space separated (CSS Color Level 4)\n * hsl(240 100% 50% / 0.1)                     // ✅ space separated with opacity\n * hsla(240, 100%, 50%)                        // ✅ hsla() alias\n * hsla(240, 100%, 50%, 0.1)                   // ✅ hsla() with opacity\n * HSL(240Deg, 100%, 50%)                      // ✅ case insensitive\n * ```\n *\n * @param string\n * @returns <RGBColor | RGBAColor | undefined>\n *\n * https://www.30secondsofcode.org/js/s/hsl-to-rgb\n */\nexport function hlsStringToRGB(hls: string): RGBColor | RGBAColor | undefined {\n  const obj = hslMatcher(hls);\n  if (!obj) return;\n  const { h: hueStr, s: sStr, l: lStr, a: alphaStr } = obj;\n  let h = 0,\n    s = 0,\n    l = 0;\n\n  if (/\\s*\\d*turn\\s*$/.test(hueStr)) {\n    h = Number(hueStr.replace(/turn\\s*$/i, '')) * 360;\n  } else if (/\\s*\\d*grad\\s*$/.test(hueStr)) {\n    h = gradsToDegrees(hueStr.replace(/grad\\s*$/i, ''));\n  } else if (/\\s*\\d*rad\\s*$/.test(hueStr)) {\n    h = radiansToDegrees(Number(hueStr.replace(/rad\\s*$/i, '')));\n  }\n\n  if (/^((-|\\+)?\\d*|(-|\\+)?\\d*?.\\d*(e\\+)?\\d*?)$/.test(hueStr.replace(/deg$/i, ''))) {\n    h = Number(hueStr.replace(/deg$/i, ''));\n  }\n  if (h > 360) h = 360;\n  if (h < 0) h = 0;\n  if (/^((-|\\+)?\\d*|(-|\\+)?\\d*?.\\d*(e\\+)?\\d*?)%$/.test(sStr)) {\n    s = Number(sStr.replace(/%$/, ''));\n  }\n  if (s > 100) s = 100;\n  if (s < 0) s = 0;\n  if (/^((-|\\+)?\\d*|(-|\\+)?\\d*?.\\d*(e\\+)?\\d*?)%$/.test(lStr)) {\n    l = Number(lStr.replace(/%$/, ''));\n  }\n  if (l > 100) l = 100;\n  if (l < 0) l = 0;\n\n  s /= 100;\n  l /= 100;\n  const k = (n: number) => (n + h / 30) % 12;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n: number) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\n\n  // rounding\n  const toFixed = (n: number) => Number(n.toFixed());\n\n  /**\n   * https://drafts.csswg.org/css-color/#typedef-alpha-value\n   * Opacity in CSS is typically represented using the <alpha-value> syntax,\n   * for example in the opacity property or as the alpha component in a color function.\n   * Represented as a <number>, the useful range of the value is 0 (representing full transparency) to 1 (representing full opacity).\n   * It can also be written as a <percentage>, which computes to the equivalent <number> (0% to 0, 100% to 1).\n   * Unless otherwise specified, an <alpha-value> component defaults to 100% when omitted.\n   * Values outside the range [0,1] are not invalid, but are clamped to that range when computed.\n   */\n  if (alphaStr && /^\\+?-?\\d*(E-\\d*|.\\d*%?)?$/.test(alphaStr)) {\n    const alpha = /%/g.test(alphaStr) ? Number(alphaStr.replace(/%/g, '')) / 100 : Number(alphaStr);\n    return { r: toFixed(255 * f(0)), g: toFixed(255 * f(8)), b: toFixed(255 * f(4)), a: alpha };\n  }\n  return { r: toFixed(255 * f(0)), g: toFixed(255 * f(8)), b: toFixed(255 * f(4)) };\n}\n\n/** Convert `grad` to `deg` */\nexport function gradsToDegrees(input: string | number) {\n  let grads = Number(input);\n\n  grads = grads % 400;\n  if (grads < 0) {\n    grads += 400;\n  }\n  // or grads = grads < 0 ? 400 + grads : grads;\n  let degrees = (grads / 400) * 360; // or let degrees = grads*0.9\n  return degrees;\n}\n\n/** Convert `rad` to `deg` */\nexport function radiansToDegrees(radians: number) {\n  return Number((radians * (180 / Math.PI)).toFixed());\n}\n", "export function toFullHex(color: string): string[] {\n  if (color.length === 4) {\n    // 3-char hex\n    return [`#${color[1].repeat(2)}${color[2].repeat(2)}${color[3].repeat(2)}`, ''];\n  }\n\n  if (color.length === 5) {\n    // 4-char hex (alpha)\n    return [`#${color[1].repeat(2)}${color[2].repeat(2)}${color[3].repeat(2)}`, color[4].repeat(2)];\n  }\n\n  if (color.length === 9) {\n    // 8-char hex (alpha)\n    return [`#${color.slice(1, -2)}`, color.slice(-2)];\n  }\n\n  return [color, ''];\n}\n/** https://stackoverflow.com/a/5624139/1334703 */\nexport function rgbToHex(r: number, g: number, b: number) {\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\n/** https://stackoverflow.com/a/5624139/1334703 */\nexport function hexToRgb(hex: string) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null;\n}\n\n/** https://css-tricks.com/converting-color-spaces-in-javascript/#aa-rgb-to-hsl */\nexport function RGBToHSL(r: number, g: number, b: number) {\n  (r /= 255), (g /= 255), (b /= 255);\n  const max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  let h = 0,\n    s,\n    l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return { h: Math.floor(h * 360), s: Math.floor(s * 100), l: Math.floor(l * 100) };\n}\n", "import { ViewPlugin, EditorView, ViewUpdate, WidgetType, Decoration, DecorationSet } from '@codemirror/view';\nimport { Extension, Range } from '@codemirror/state';\nimport { syntaxTree } from '@codemirror/language';\nimport colors from 'colors-named';\nimport hexs from 'colors-named-hex';\nimport hslMatcher, { hlsStringToRGB, RGBAColor } from 'hsl-matcher';\nimport { toFullHex, rgbToHex, hexToRgb, RGBToHSL } from './utils';\n\nexport enum ColorType {\n  rgb = 'RGB',\n  hex = 'HEX',\n  named = 'NAMED',\n  hsl = 'HSL',\n}\n\nexport interface ColorState {\n  from: number;\n  to: number;\n  alpha: string;\n  colorType: ColorType;\n}\n\nconst colorState = new WeakMap<HTMLInputElement, ColorState>();\n\ntype GetArrayElementType<T extends readonly any[]> = T extends readonly (infer U)[] ? U : never;\n\nfunction colorDecorations(view: EditorView) {\n  const widgets: Array<Range<Decoration>> = [];\n  for (const range of view.visibleRanges) {\n    syntaxTree(view.state).iterate({\n      from: range.from,\n      to: range.to,\n      enter: ({ type, from, to }) => {\n        const callExp: string = view.state.doc.sliceString(from, to);\n        /**\n         * ```\n         * rgb(0 107   128, .5);         ❌ ❌ ❌\n         * rgb( 0 107   128 );           ✅ ✅ ✅\n         * RGB( 0 107   128 );           ✅ ✅ ✅\n         * Rgb( 0 107   128 );           ✅ ✅ ✅\n         * rgb( 0 107 128 / );           ❌ ❌ ❌\n         * rgb( 0 107 128 /   60%);      ✅ ✅ ✅\n         * rgb(0,107,128 / 60%);         ❌ ❌ ❌\n         * rgb( 255, 255, 255 )          ✅ ✅ ✅\n         * rgba( 255, 255, 255 )         ✅ ✅ ✅\n         * rgba( 255, 255  , 255, )      ❌ ❌ ❌\n         * rgba( 255, 255  , 255,  .5 )  ✅ ✅ ✅\n         * rgba( 255 255 255 / 0.5 );    ✅ ✅ ✅\n         * rgba( 255 255 255   0.5 );    ❌ ❌ ❌\n         * rgba( 255 255 255 /  );       ❌ ❌ ❌\n         * ```\n         */\n        if (type.name === 'CallExpression' && callExp.startsWith('rgb')) {\n          const match =\n            /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,?\\s*(\\d{1,3})\\s*(,\\s*\\d*\\.\\d*\\s*)?\\)/i.exec(callExp) ||\n            /rgba?\\(\\s*(\\d{1,3})\\s*(\\d{1,3})\\s*(\\d{1,3})\\s*(\\/?\\s*\\d+%)?(\\/\\s*\\d+\\.\\d\\s*)?\\)/i.exec(callExp);\n          if (!match) return;\n          const [_, r, g, b, a] = match;\n          const hex = rgbToHex(Number(r), Number(g), Number(b));\n          const widget = Decoration.widget({\n            widget: new ColorWidget({\n              colorType: ColorType.rgb,\n              color: hex,\n              colorRaw: callExp,\n              from,\n              to,\n              alpha: a ? a.replace(/(\\/|,)/g, '') : '',\n            }),\n            side: 0,\n          });\n          widgets.push(widget.range(from));\n        } else if (type.name === 'CallExpression' && hslMatcher(callExp)) {\n          /**\n           * # valid\n           * hsl(240, 100%, 50%)                           // ✅ comma separated\n           * hsl(240, 100%, 50%, 0.1)                      // ✅ comma separated with opacity\n           * hsl(240, 100%, 50%, 10%)                      // ✅ comma separated with % opacity\n           * hsl(240,100%,50%,0.1)                         // ✅ comma separated without spaces\n           * hsl(180deg, 100%, 50%, 0.1)                   // ✅ hue with 'deg'\n           * hsl(3.14rad, 100%, 50%, 0.1)                  // ✅ hue with 'rad'\n           * hsl(200grad, 100%, 50%, 0.1)                  // ✅ hue with 'grad'\n           * hsl(0.5turn, 100%, 50%, 0.1)                  // ✅ hue with 'turn'\n           * hsl(-240, -100%, -50%, -0.1)                  // ✅ negative values\n           * hsl(+240, +100%, +50%, +0.1)                  // ✅ explicit positive sign\n           * hsl(240.5, 99.99%, 49.999%, 0.9999)           // ✅ non-integer values\n           * hsl(.9, .99%, .999%, .9999)                   // ✅ fraction w/o leading zero\n           * hsl(0240, 0100%, 0050%, 01)                   // ✅ leading zeros\n           * hsl(240.0, 100.00%, 50.000%, 1.0000)          // ✅ trailing decimal zeros\n           * hsl(2400, 1000%, 1000%, 10)                   // ✅ out of range values\n           * hsl(-2400.01deg, -1000.5%, -1000.05%, -100)   // ✅ combination of above\n           * hsl(2.40e+2, 1.00e+2%, 5.00e+1%, 1E-3)        // ✅ scientific notation\n           * hsl(240 100% 50%)                             // ✅ space separated (CSS Color Level 4)\n           * hsl(240 100% 50% / 0.1)                       // ✅ space separated with opacity\n           * hsla(240, 100%, 50%)                          // ✅ hsla() alias\n           * hsla(240, 100%, 50%, 0.1)                     // ✅ hsla() with opacity\n           * HSL(240Deg, 100%, 50%)                        // ✅ case insensitive\n           */\n          const match = hlsStringToRGB(callExp) as RGBAColor;\n          if (!match) return;\n          const { r, g, b } = match;\n          const hex = rgbToHex(Number(r), Number(g), Number(b));\n          const widget = Decoration.widget({\n            widget: new ColorWidget({\n              colorType: ColorType.hsl,\n              color: hex,\n              colorRaw: callExp,\n              from,\n              to,\n              alpha: match.a ? match.a.toString() : '',\n            }),\n            side: 0,\n          });\n          widgets.push(widget.range(from));\n        } else if (type.name === 'ColorLiteral') {\n          const [color, alpha] = toFullHex(callExp);\n          const widget = Decoration.widget({\n            widget: new ColorWidget({\n              colorType: ColorType.hex,\n              color,\n              colorRaw: callExp,\n              from,\n              to,\n              alpha,\n            }),\n            side: 0,\n          });\n          widgets.push(widget.range(from));\n        } else if (type.name === 'ValueName') {\n          const name = callExp as unknown as GetArrayElementType<typeof colors>;\n          if (colors.includes(name)) {\n            const widget = Decoration.widget({\n              widget: new ColorWidget({\n                colorType: ColorType.named,\n                color: hexs[colors.indexOf(name)],\n                colorRaw: callExp,\n                from,\n                to,\n                alpha: '',\n              }),\n              side: 0,\n            });\n            widgets.push(widget.range(from));\n          }\n        }\n      },\n    });\n  }\n  return Decoration.set(widgets);\n}\n\nclass ColorWidget extends WidgetType {\n  private readonly state: ColorState;\n  private readonly color: string;\n  private readonly colorRaw: string;\n\n  constructor({\n    color,\n    colorRaw,\n    ...state\n  }: ColorState & {\n    color: string;\n    colorRaw: string;\n  }) {\n    super();\n    this.state = state;\n    this.color = color;\n    this.colorRaw = colorRaw;\n  }\n  eq(other: ColorWidget) {\n    return (\n      other.state.colorType === this.state.colorType &&\n      other.color === this.color &&\n      other.state.from === this.state.from &&\n      other.state.to === this.state.to &&\n      other.state.alpha === this.state.alpha\n    );\n  }\n  toDOM() {\n    const picker = document.createElement('input');\n    colorState.set(picker, this.state);\n    picker.type = 'color';\n    picker.value = this.color;\n    picker.dataset['color'] = this.color;\n    picker.dataset['colorraw'] = this.colorRaw;\n    const wrapper = document.createElement('span');\n    wrapper.appendChild(picker);\n    wrapper.dataset['color'] = this.color;\n    wrapper.style.backgroundColor = this.colorRaw;\n    return wrapper;\n  }\n  ignoreEvent() {\n    return false;\n  }\n}\n\nexport const colorView = (showPicker: boolean = true) =>\n  ViewPlugin.fromClass(\n    class ColorView {\n      decorations: DecorationSet;\n      constructor(view: EditorView) {\n        this.decorations = colorDecorations(view);\n      }\n      update(update: ViewUpdate) {\n        if (update.docChanged || update.viewportChanged) {\n          this.decorations = colorDecorations(update.view);\n        }\n        const readOnly = update.view.contentDOM.ariaReadOnly === 'true';\n        const editable = update.view.contentDOM.contentEditable === 'true';\n\n        const canBeEdited = readOnly === false && editable;\n        this.changePicker(update.view, canBeEdited);\n      }\n      changePicker(view: EditorView, canBeEdited: boolean) {\n        const doms = view.contentDOM.querySelectorAll('input[type=color]');\n        doms.forEach((inp) => {\n          if (!showPicker) {\n            inp.setAttribute('disabled', '');\n          } else {\n            canBeEdited ? inp.removeAttribute('disabled') : inp.setAttribute('disabled', '');\n          }\n        });\n      }\n    },\n    {\n      decorations: (v) => v.decorations,\n      eventHandlers: {\n        change: (e, view) => {\n          const target = e.target as HTMLInputElement;\n          if (\n            target.nodeName !== 'INPUT' ||\n            !target.parentElement ||\n            (!target.dataset.color && !target.dataset.colorraw)\n          )\n            return false;\n          const data = colorState.get(target)!;\n          const value = target.value;\n          const rgb = hexToRgb(value);\n          const colorraw = target.dataset.colorraw;\n          const slash = (target.dataset.colorraw || '').indexOf('/') > 4;\n          const comma = (target.dataset.colorraw || '').indexOf(',') > 4;\n          let converted = target.value;\n          if (data.colorType === ColorType.rgb) {\n            let funName = colorraw?.match(/^(rgba?)/) ? colorraw?.match(/^(rgba?)/)![0] : undefined;\n            if (comma) {\n              converted = rgb\n                ? `${funName}(${rgb.r}, ${rgb.g}, ${rgb.b}${data.alpha ? ', ' + data.alpha.trim() : ''})`\n                : value;\n            } else if (slash) {\n              converted = rgb\n                ? `${funName}(${rgb.r} ${rgb.g} ${rgb.b}${data.alpha ? ' / ' + data.alpha.trim() : ''})`\n                : value;\n            } else {\n              converted = rgb ? `${funName}(${rgb.r} ${rgb.g} ${rgb.b})` : value;\n            }\n          } else if (data.colorType === ColorType.hsl) {\n            const rgb = hexToRgb(value);\n            if (rgb) {\n              const { h, s, l } = RGBToHSL(rgb?.r, rgb?.g, rgb?.b);\n              converted = `hsl(${h}deg ${s}% ${l}%${data.alpha ? ' / ' + data.alpha : ''})`;\n            }\n          }\n          view.dispatch({\n            changes: {\n              from: data.from,\n              to: data.to,\n              insert: converted,\n            },\n          });\n          return true;\n        },\n      },\n    },\n  );\n\nexport const colorTheme = EditorView.baseTheme({\n  'span[data-color]': {\n    width: '12px',\n    height: '12px',\n    display: 'inline-block',\n    borderRadius: '2px',\n    marginRight: '0.5ch',\n    outline: '1px solid #00000040',\n    overflow: 'hidden',\n    verticalAlign: 'middle',\n    marginTop: '-2px',\n  },\n  'span[data-color] input[type=\"color\"]': {\n    background: 'transparent',\n    display: 'block',\n    border: 'none',\n    outline: '0',\n    paddingLeft: '24px',\n    height: '12px',\n  },\n  'span[data-color] input[type=\"color\"]::-webkit-color-swatch': {\n    border: 'none',\n    paddingLeft: '24px',\n  },\n});\n\nexport const color: Extension = [colorView(), colorTheme];\n"],
  "mappings": ";;;;;;;;;;;;;;AAGA,IAAM,QAAQ;EACZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAGF,IAAA,cAAe;;;ACvJfeAAe;;;AC1Jf,IAAM,UACJ;AACF,IAAM,gBACJ;AAEF,IAAM,OAAO,CAAC,MAAgB,IAAI,EAAE,QAAQ,cAAc,EAAE,EAAE,KAAI,IAAK;AAuBzD,SAAP,WAA4B,MAAc,IAAE;AACjD,QAAM,QAAQ,QAAQ,KAAK,GAAG,KAAK,cAAc,KAAK,GAAG;AACzD,MAAI,CAAC,CAAC,OAAO;AACX,UAAM,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI;AACxB,QAAI,KAAK,uBAAuB,KAAK,EAAE,KAAI,CAAE;AAAG;AAChD,WAAO;MACL;MACA;MACA;MACA,GAAG,KAAK,CAAC;;;AAGf;AAqCM,SAAU,eAAe,KAAW;AACxC,QAAM,MAAM,WAAW,GAAG;AAC1B,MAAI,CAAC;AAAK;AACV,QAAM,EAAE,GAAG,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAG,SAAQ,IAAK;AACrD,MAAI,IAAI,GACN,IAAI,GACJ,IAAI;AAEN,MAAI,iBAAiB,KAAK,MAAM,GAAG;AACjC,QAAI,OAAO,OAAO,QAAQ,aAAa,EAAE,CAAC,IAAI;aACrC,iBAAiB,KAAK,MAAM,GAAG;AACxC,QAAI,eAAe,OAAO,QAAQ,aAAa,EAAE,CAAC;aACzC,gBAAgB,KAAK,MAAM,GAAG;AACvC,QAAI,iBAAiB,OAAO,OAAO,QAAQ,YAAY,EAAE,CAAC,CAAC;;AAG7D,MAAI,2CAA2C,KAAK,OAAO,QAAQ,SAAS,EAAE,CAAC,GAAG;AAChF,QAAI,OAAO,OAAO,QAAQ,SAAS,EAAE,CAAC;;AAExC,MAAI,IAAI;AAAK,QAAI;AACjB,MAAI,IAAI;AAAG,QAAI;AACf,MAAI,4CAA4C,KAAK,IAAI,GAAG;AAC1D,QAAI,OAAO,KAAK,QAAQ,MAAM,EAAE,CAAC;;AAEnC,MAAI,IAAI;AAAK,QAAI;AACjB,MAAI,IAAI;AAAG,QAAI;AACf,MAAI,4CAA4C,KAAK,IAAI,GAAG;AAC1D,QAAI,OAAO,KAAK,QAAQ,MAAM,EAAE,CAAC;;AAEnC,MAAI,IAAI;AAAK,QAAI;AACjB,MAAI,IAAI;AAAG,QAAI;AAEf,OAAK;AACL,OAAK;AACL,QAAM,IAAI,CAAC,OAAe,IAAI,IAAI,MAAM;AACxC,QAAM,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,CAAC;AAC/B,QAAM,IAAI,CAAC,MAAc,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAGvF,QAAM,UAAU,CAAC,MAAc,OAAO,EAAE,QAAO,CAAE;AAWjD,MAAI,YAAY,4BAA4B,KAAK,QAAQ,GAAG;AAC1D,UAAM,QAAQ,KAAK,KAAK,QAAQ,IAAI,OAAO,SAAS,QAAQ,MAAM,EAAE,CAAC,IAAI,MAAM,OAAO,QAAQ;AAC9F,WAAO,EAAE,GAAG,QAAQ,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,QAAQ,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,QAAQ,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,MAAK;;AAE3F,SAAO,EAAE,GAAG,QAAQ,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,QAAQ,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,QAAQ,MAAM,EAAE,CAAC,CAAC,EAAC;AACjF;AAGM,SAAU,eAAe,OAAsB;AACnD,MAAI,QAAQ,OAAO,KAAK;AAExB,UAAQ,QAAQ;AAChB,MAAI,QAAQ,GAAG;AACb,aAAS;;AAGX,MAAI,UAAW,QAAQ,MAAO;AAC9B,SAAO;AACT;AAGM,SAAU,iBAAiB,SAAe;AAC9C,SAAO,QAAQ,WAAW,MAAM,KAAK,KAAK,QAAO,CAAE;AACrD;;;ACtJO,SAASC,UAAUC,QAAyB;AACjD,MAAIA,OAAMC,WAAW,GAAG;AAEtB,WAAO,CAAA,MAAKD,OAAM,GAAGE,OAAO,CAAC,IAAIF,OAAM,GAAGE,OAAO,CAAC,IAAIF,OAAM,GAAGE,OAAO,CAAC,GAAK,EAAE;EAChF;AAEA,MAAIF,OAAMC,WAAW,GAAG;AAEtB,WAAO,CAAA,MAAKD,OAAM,GAAGE,OAAO,CAAC,IAAIF,OAAM,GAAGE,OAAO,CAAC,IAAIF,OAAM,GAAGE,OAAO,CAAC,GAAKF,OAAM,GAAGE,OAAO,CAAC,CAAC;EAChG;AAEA,MAAIF,OAAMC,WAAW,GAAG;AAEtB,WAAO,CAAA,MAAKD,OAAMG,MAAM,GAAG,EAAE,GAAKH,OAAMG,MAAM,EAAE,CAAC;EACnD;AAEA,SAAO,CAACH,QAAO,EAAE;AACnB;AAEO,SAASI,SAASC,GAAWC,GAAWC,GAAW;AACxD,SAAO,QAAQ,KAAK,OAAOF,KAAK,OAAOC,KAAK,KAAKC,GAAGC,SAAS,EAAE,EAAEL,MAAM,CAAC;AAC1E;AAGO,SAASM,SAASC,KAAa;AACpC,MAAMC,SAAS,4CAA4CC,KAAKF,GAAG;AACnE,SAAOC,SACH;IACEN,GAAGQ,SAASF,OAAO,IAAI,EAAE;IACzBL,GAAGO,SAASF,OAAO,IAAI,EAAE;IACzBJ,GAAGM,SAASF,OAAO,IAAI,EAAE;EAC3B,IACA;AACN;AAGO,SAASG,SAAST,GAAWC,GAAWC,GAAW;AACvDF,OAAK,KAAOC,KAAK,KAAOC,KAAK;AAC9B,MAAMQ,MAAMC,KAAKD,IAAIV,GAAGC,GAAGC,CAAC,GAC1BU,MAAMD,KAAKC,IAAIZ,GAAGC,GAAGC,CAAC;AACxB,MAAIW,IAAI,GACNC,GACAC,KAAKL,MAAME,OAAO;AAEpB,MAAIF,OAAOE,KAAK;AACdC,QAAIC,IAAI;EACV,OAAO;AACL,QAAME,IAAIN,MAAME;AAChBE,QAAIC,IAAI,MAAMC,KAAK,IAAIN,MAAME,OAAOI,KAAKN,MAAME;AAC/C,YAAQF,KAAG;MACT,KAAKV;AACHa,aAAKZ,IAAIC,KAAKc,KAAKf,IAAIC,IAAI,IAAI;AAC/B;MACF,KAAKD;AACHY,aAAKX,IAAIF,KAAKgB,IAAI;AAClB;MACF,KAAKd;AACHW,aAAKb,IAAIC,KAAKe,IAAI;AAClB;IAAM;AAEVH,SAAK;EACP;AACA,SAAO;IAAEA,GAAGF,KAAKM,MAAMJ,IAAI,GAAG;IAAGC,GAAGH,KAAKM,MAAMH,IAAI,GAAG;IAAGC,GAAGJ,KAAKM,MAAMF,IAAI,GAAG;EAAE;AAClF;;;;ACvDA,IAAYG;CAKX,SALWA,YAAS;AAATA,EAAAA,WAAS,SAAA;AAATA,EAAAA,WAAS,SAAA;AAATA,EAAAA,WAAS,WAAA;AAATA,EAAAA,WAAS,SAAA;AAAA,GAATA,cAAAA,YAAS,CAAA,EAAA;AAcrB,IAAMC,aAAa,oBAAIC,QAAO;AAI9B,SAASC,iBAAiBC,MAAkB;AAC1C,MAAMC,UAAoC,CAAA;AAC1C,WAAWC,SAASF,KAAKG,eAAe;AACtCC,eAAWJ,KAAKK,KAAK,EAAEC,QAAQ;MAC7BC,MAAML,MAAMK;MACZC,IAAIN,MAAMM;MACVC,OAAO,UAAwB;AAAA,YAAvB;UAAEC;UAAMH;UAAMC;QAAG,IAAC;AACxB,YAAMG,UAAkBX,KAAKK,MAAMO,IAAIC,YAAYN,MAAMC,EAAE;AAmB3D,YAAIE,KAAKI,SAAS,oBAAoBH,QAAQI,WAAW,KAAK,GAAG;AAC/D,cAAMC,QACJ,+EAA+EC,KAAKN,OAAO,KAC3F,mFAAmFM,KAAKN,OAAO;AACjG,cAAI,CAACK;AAAO;AACZ,cAAM,CAACE,GAAGC,GAAGC,GAAGC,GAAGC,CAAC,IAAIN;AACxB,cAAMO,MAAMC,SAASC,OAAON,CAAC,GAAGM,OAAOL,CAAC,GAAGK,OAAOJ,CAAC,CAAC;AACpD,cAAMK,SAASC,WAAWD,OAAO;YAC/BA,QAAQ,IAAIE,YAAY;cACtBC,WAAWjC,UAAUkC;cACrBC,OAAOR;cACPS,UAAUrB;cACVJ;cACAC;cACAyB,OAAOX,IAAIA,EAAEY,QAAQ,WAAW,EAAE,IAAI;YACxC,CAAC;YACDC,MAAM;UACR,CAAC;AACDlC,kBAAQmC,KAAKV,OAAOxB,MAAMK,IAAI,CAAC;QACjC,WAAWG,KAAKI,SAAS,oBAAoBuB,WAAW1B,OAAO,GAAG;AA0BhE,cAAMK,SAAQsB,eAAe3B,OAAO;AACpC,cAAI,CAACK;AAAO;AACZ,cAAM;YAAEG,GAAAA;YAAGC,GAAAA;YAAGC,GAAAA;UAAE,IAAIL;AACpB,cAAMO,OAAMC,SAASC,OAAON,EAAC,GAAGM,OAAOL,EAAC,GAAGK,OAAOJ,EAAC,CAAC;AACpD,cAAMK,UAASC,WAAWD,OAAO;YAC/BA,QAAQ,IAAIE,YAAY;cACtBC,WAAWjC,UAAU2C;cACrBR,OAAOR;cACPS,UAAUrB;cACVJ;cACAC;cACAyB,OAAOjB,OAAMM,IAAIN,OAAMM,EAAEkB,SAAQ,IAAK;YACxC,CAAC;YACDL,MAAM;UACR,CAAC;AACDlC,kBAAQmC,KAAKV,QAAOxB,MAAMK,IAAI,CAAC;QACjC,WAAWG,KAAKI,SAAS,gBAAgB;AACvC,cAAM,CAACiB,QAAOE,KAAK,IAAIQ,UAAU9B,OAAO;AACxC,cAAMe,WAASC,WAAWD,OAAO;YAC/BA,QAAQ,IAAIE,YAAY;cACtBC,WAAWjC,UAAU2B;cACrBQ,OAAAA;cACAC,UAAUrB;cACVJ;cACAC;cACAyB;YACF,CAAC;YACDE,MAAM;UACR,CAAC;AACDlC,kBAAQmC,KAAKV,SAAOxB,MAAMK,IAAI,CAAC;QACjC,WAAWG,KAAKI,SAAS,aAAa;AACpC,cAAMA,OAAOH;AACb,cAAI+B,YAAOC,SAAS7B,IAAI,GAAG;AACzB,gBAAMY,WAASC,WAAWD,OAAO;cAC/BA,QAAQ,IAAIE,YAAY;gBACtBC,WAAWjC,UAAUgD;gBACrBb,OAAOc,aAAKH,YAAOI,QAAQhC,IAAI;gBAC/BkB,UAAUrB;gBACVJ;gBACAC;gBACAyB,OAAO;cACT,CAAC;cACDE,MAAM;YACR,CAAC;AACDlC,oBAAQmC,KAAKV,SAAOxB,MAAMK,IAAI,CAAC;UACjC;QACF;MACF;IACF,CAAC;EACH;AACA,SAAOoB,WAAWoB,IAAI9C,OAAO;AAC/B;AAEA,IAAM2B,cAAN,cAA0BoB,WAAW;EAKnCC,YAAW,OAOR;AAAA,QAPS;MACVlB,OAAAA;MACAC;IAKF,IAAC,OAJI3B,QAAK,8BAAA,OAAA,SAAA;AAKR,UAAK;AAAG,SAZOA,QAAK;AAAA,SACL0B,QAAK;AAAA,SACLC,WAAQ;AAWvB,SAAK3B,QAAQA;AACb,SAAK0B,QAAQA;AACb,SAAKC,WAAWA;EAClB;EACAkB,GAAGC,OAAoB;AACrB,WACEA,MAAM9C,MAAMwB,cAAc,KAAKxB,MAAMwB,aACrCsB,MAAMpB,UAAU,KAAKA,SACrBoB,MAAM9C,MAAME,SAAS,KAAKF,MAAME,QAChC4C,MAAM9C,MAAMG,OAAO,KAAKH,MAAMG,MAC9B2C,MAAM9C,MAAM4B,UAAU,KAAK5B,MAAM4B;EAErC;EACAmB,QAAQ;AACN,QAAMC,SAASC,SAASC,cAAc,OAAO;AAC7C1D,eAAWkD,IAAIM,QAAQ,KAAKhD,KAAK;AACjCgD,WAAO3C,OAAO;AACd2C,WAAOG,QAAQ,KAAKzB;AACpBsB,WAAOI,QAAQ,WAAW,KAAK1B;AAC/BsB,WAAOI,QAAQ,cAAc,KAAKzB;AAClC,QAAM0B,UAAUJ,SAASC,cAAc,MAAM;AAC7CG,YAAQC,YAAYN,MAAM;AAC1BK,YAAQD,QAAQ,WAAW,KAAK1B;AAChC2B,YAAQE,MAAMC,kBAAkB,KAAK7B;AACrC,WAAO0B;EACT;EACAI,cAAc;AACZ,WAAO;EACT;AACF;AAEO,IAAMC,YAAY,SAAZA,WAAaC,YAAmB;AAAA,MAAnBA,eAAmB,QAAA;AAAnBA,iBAAsB;EAAI;AAAA,SAClDC,WAAWC,UACT,MAAMC,UAAU;IAEdlB,YAAYjD,MAAkB;AAAA,WAD9BoE,cAAW;AAET,WAAKA,cAAcrE,iBAAiBC,IAAI;IAC1C;IACAqE,OAAOA,QAAoB;AACzB,UAAIA,OAAOC,cAAcD,OAAOE,iBAAiB;AAC/C,aAAKH,cAAcrE,iBAAiBsE,OAAOrE,IAAI;MACjD;AACA,UAAMwE,WAAWH,OAAOrE,KAAKyE,WAAWC,iBAAiB;AACzD,UAAMC,WAAWN,OAAOrE,KAAKyE,WAAWG,oBAAoB;AAE5D,UAAMC,cAAcL,aAAa,SAASG;AAC1C,WAAKG,aAAaT,OAAOrE,MAAM6E,WAAW;IAC5C;IACAC,aAAa9E,MAAkB6E,aAAsB;AACnD,UAAME,OAAO/E,KAAKyE,WAAWO,iBAAiB,mBAAmB;AACjED,WAAKE,QAASC,SAAQ;AACpB,YAAI,CAAClB,YAAY;AACfkB,cAAIC,aAAa,YAAY,EAAE;QACjC,OAAO;AACLN,wBAAcK,IAAIE,gBAAgB,UAAU,IAAIF,IAAIC,aAAa,YAAY,EAAE;QACjF;MACF,CAAC;IACH;EACF,GACA;IACEf,aAAciB,OAAMA,EAAEjB;IACtBkB,eAAe;MACbC,QAAQ,CAACC,GAAGxF,SAAS;AACnB,YAAMyF,SAASD,EAAEC;AACjB,YACEA,OAAOC,aAAa,WACpB,CAACD,OAAOE,iBACP,CAACF,OAAOhC,QAAQ1B,SAAS,CAAC0D,OAAOhC,QAAQmC;AAE1C,iBAAO;AACT,YAAMC,OAAOhG,WAAWiG,IAAIL,MAAM;AAClC,YAAMjC,QAAQiC,OAAOjC;AACrB,YAAM1B,MAAMiE,SAASvC,KAAK;AAC1B,YAAMoC,WAAWH,OAAOhC,QAAQmC;AAChC,YAAMI,SAASP,OAAOhC,QAAQmC,YAAY,IAAI9C,QAAQ,GAAG,IAAI;AAC7D,YAAMmD,SAASR,OAAOhC,QAAQmC,YAAY,IAAI9C,QAAQ,GAAG,IAAI;AAC7D,YAAIoD,YAAYT,OAAOjC;AACvB,YAAIqC,KAAKhE,cAAcjC,UAAUkC,KAAK;AACpC,cAAIqE,UAAUP,YAAQ,QAARA,SAAU5E,MAAM,UAAU,IAAI4E,YAAQ,OAAA,SAARA,SAAU5E,MAAM,UAAU,EAAG,KAAKoF;AAC9E,cAAIH,OAAO;AACTC,wBAAYpE,MACLqE,UAAO,MAAIrE,IAAIX,IAAC,OAAKW,IAAIV,IAAC,OAAKU,IAAIT,KAAIwE,KAAK5D,QAAQ,OAAO4D,KAAK5D,MAAMoE,KAAI,IAAK,MAAE,MACpF7C;UACN,WAAWwC,OAAO;AAChBE,wBAAYpE,MACLqE,UAAO,MAAIrE,IAAIX,IAAC,MAAIW,IAAIV,IAAC,MAAIU,IAAIT,KAAIwE,KAAK5D,QAAQ,QAAQ4D,KAAK5D,MAAMoE,KAAI,IAAK,MAAE,MACnF7C;UACN,OAAO;AACL0C,wBAAYpE,MAASqE,UAAO,MAAIrE,IAAIX,IAAC,MAAIW,IAAIV,IAAC,MAAIU,IAAIT,IAAC,MAAMmC;UAC/D;QACF,WAAWqC,KAAKhE,cAAcjC,UAAU2C,KAAK;AAC3C,cAAMT,OAAMiE,SAASvC,KAAK;AAC1B,cAAI1B,MAAK;AACP,gBAAM;cAAEwE;cAAGC;cAAGC;YAAE,IAAIC,SAAS3E,QAAG,OAAA,SAAHA,KAAKX,GAAGW,QAAG,OAAA,SAAHA,KAAKV,GAAGU,QAAG,OAAA,SAAHA,KAAKT,CAAC;AACnD6E,wBAAS,SAAUI,IAAC,SAAOC,IAAC,OAAKC,IAAC,OAAIX,KAAK5D,QAAQ,QAAQ4D,KAAK5D,QAAQ,MAAE;UAC5E;QACF;AACAjC,aAAK0G,SAAS;UACZC,SAAS;YACPpG,MAAMsF,KAAKtF;YACXC,IAAIqF,KAAKrF;YACToG,QAAQV;UACV;QACF,CAAC;AACD,eAAO;MACT;IACF;EACF,CAAC;AACF;AAEI,IAAMW,aAAaC,WAAWC,UAAU;EAC7C,oBAAoB;IAClBC,OAAO;IACPC,QAAQ;IACRC,SAAS;IACTC,cAAc;IACdC,aAAa;IACbC,SAAS;IACTC,UAAU;IACVC,eAAe;IACfC,WAAW;EACb;EACA,wCAAwC;IACtCC,YAAY;IACZP,SAAS;IACTQ,QAAQ;IACRL,SAAS;IACTM,aAAa;IACbV,QAAQ;EACV;EACA,8DAA8D;IAC5DS,QAAQ;IACRC,aAAa;EACf;AACF,CAAC;AAEM,IAAM5F,QAAmB,CAACgC,UAAS,GAAI8C,UAAU;",
  "names": ["lib_default", "toFullHex", "color", "length", "repeat", "slice", "rgbToHex", "r", "g", "b", "toString", "hexToRgb", "hex", "result", "exec", "parseInt", "RGBToHSL", "max", "Math", "min", "h", "s", "l", "d", "floor", "ColorType", "colorState", "WeakMap", "colorDecorations", "view", "widgets", "range", "visibleRanges", "syntaxTree", "state", "iterate", "from", "to", "enter", "type", "callExp", "doc", "sliceString", "name", "startsWith", "match", "exec", "_", "r", "g", "b", "a", "hex", "rgbToHex", "Number", "widget", "Decoration", "ColorWidget", "colorType", "rgb", "color", "colorRaw", "alpha", "replace", "side", "push", "hslMatcher", "hlsStringToRGB", "hsl", "toString", "toFullHex", "colors", "includes", "named", "hexs", "indexOf", "set", "WidgetType", "constructor", "eq", "other", "toDOM", "picker", "document", "createElement", "value", "dataset", "wrapper", "appendChild", "style", "backgroundColor", "ignoreEvent", "colorView", "showPicker", "ViewPlugin", "fromClass", "ColorView", "decorations", "update", "docChanged", "viewportChanged", "readOnly", "contentDOM", "ariaReadOnly", "editable", "contentEditable", "canBeEdited", "changePicker", "doms", "querySelectorAll", "forEach", "inp", "setAttribute", "removeAttribute", "v", "eventHandlers", "change", "e", "target", "nodeName", "parentElement", "colorraw", "data", "get", "hexToRgb", "slash", "comma", "converted", "funName", "undefined", "trim", "h", "s", "l", "RGBToHSL", "dispatch", "changes", "insert", "colorTheme", "EditorView", "baseTheme", "width", "height", "display", "borderRadius", "marginRight", "outline", "overflow", "verticalAlign", "marginTop", "background", "border", "paddingLeft"]
}
