{
  "version": 3,
  "sources": ["../../@uiw/codemirror-themes/src/index.tsx"],
  "sourcesContent": ["import { EditorView } from '@codemirror/view';\nimport { Extension } from '@codemirror/state';\nimport { HighlightStyle, TagStyle, syntaxHighlighting } from '@codemirror/language';\nimport { StyleSpec } from 'style-mod';\n\nexport interface CreateThemeOptions {\n  /**\n   * Theme inheritance. Determines which styles CodeMirror will apply by default.\n   */\n  theme: Theme;\n  /**\n   * Settings to customize the look of the editor, like background, gutter, selection and others.\n   */\n  settings: Settings;\n  /** Syntax highlighting styles. */\n  styles: TagStyle[];\n}\n\ntype Theme = 'light' | 'dark';\n\nexport interface Settings {\n  /** Editor background. */\n  background: string;\n  /** Default text color. */\n  foreground: string;\n  /** Caret color. */\n  caret?: string;\n  /** Selection background. */\n  selection?: string;\n  /** Selection match background. */\n  selectionMatch?: string;\n  /** Background of highlighted lines. */\n  lineHighlight?: string;\n  /** Gutter background. */\n  gutterBackground?: string;\n  /** Text color inside gutter. */\n  gutterForeground?: string;\n  /** Text active color inside gutter. */\n  gutterActiveForeground?: string;\n  /** Gutter right border color. */\n  gutterBorder?: string;\n  /** set editor font */\n  fontFamily?: string;\n}\n\nexport const createTheme = ({ theme, settings, styles }: CreateThemeOptions): Extension => {\n  const themeOptions: Record<string, StyleSpec> = {\n    '&': {\n      backgroundColor: settings.background,\n      color: settings.foreground,\n    },\n    '.cm-gutters': {},\n  };\n\n  if (settings.fontFamily) {\n    themeOptions['&.cm-editor .cm-scroller'] = {\n      fontFamily: settings.fontFamily,\n    };\n  }\n  if (settings.gutterBackground) {\n    themeOptions['.cm-gutters'].backgroundColor = settings.gutterBackground;\n  }\n  if (settings.gutterForeground) {\n    themeOptions['.cm-gutters'].color = settings.gutterForeground;\n  }\n  if (settings.gutterBorder) {\n    themeOptions['.cm-gutters'].borderRightColor = settings.gutterBorder;\n  }\n\n  if (settings.caret) {\n    themeOptions['.cm-content'] = {\n      caretColor: settings.caret,\n    };\n    themeOptions['.cm-cursor, .cm-dropCursor'] = {\n      borderLeftColor: settings.caret,\n    };\n  }\n  let activeLineGutterStyle: StyleSpec = {};\n  if (settings.gutterActiveForeground) {\n    activeLineGutterStyle.color = settings.gutterActiveForeground;\n  }\n  if (settings.lineHighlight) {\n    themeOptions['.cm-activeLine'] = {\n      backgroundColor: settings.lineHighlight,\n    };\n    activeLineGutterStyle.backgroundColor = settings.lineHighlight;\n  }\n  themeOptions['.cm-activeLineGutter'] = activeLineGutterStyle;\n\n  if (settings.selection) {\n    themeOptions[\n      '&.cm-focused .cm-selectionBackground, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection'\n    ] = {\n      backgroundColor: settings.selection,\n    };\n  }\n  if (settings.selectionMatch) {\n    themeOptions['& .cm-selectionMatch'] = {\n      backgroundColor: settings.selectionMatch,\n    };\n  }\n  const themeExtension = EditorView.theme(themeOptions, {\n    dark: theme === 'dark',\n  });\n\n  const highlightStyle = HighlightStyle.define(styles);\n  const extension = [themeExtension, syntaxHighlighting(highlightStyle)];\n\n  return extension;\n};\n\nexport default createTheme;\n"],
  "mappings": ";;;;;;;;;AA6CO,IAAMA,cAAc,UAAgE;AAAA,MAA/D;IAAEC;IAAOC;IAAUC;EAA2B,IAAC;AACzE,MAAMC,eAA0C;IAC9C,KAAK;MACHC,iBAAiBH,SAASI;MAC1BC,OAAOL,SAASM;IAClB;IACA,eAAe,CAAC;EAClB;AAEA,MAAIN,SAASO,YAAY;AACvBL,iBAAa,8BAA8B;MACzCK,YAAYP,SAASO;IACvB;EACF;AACA,MAAIP,SAASQ,kBAAkB;AAC7BN,iBAAa,eAAeC,kBAAkBH,SAASQ;EACzD;AACA,MAAIR,SAASS,kBAAkB;AAC7BP,iBAAa,eAAeG,QAAQL,SAASS;EAC/C;AACA,MAAIT,SAASU,cAAc;AACzBR,iBAAa,eAAeS,mBAAmBX,SAASU;EAC1D;AAEA,MAAIV,SAASY,OAAO;AAClBV,iBAAa,iBAAiB;MAC5BW,YAAYb,SAASY;IACvB;AACAV,iBAAa,gCAAgC;MAC3CY,iBAAiBd,SAASY;IAC5B;EACF;AACA,MAAIG,wBAAmC,CAAC;AACxC,MAAIf,SAASgB,wBAAwB;AACnCD,0BAAsBV,QAAQL,SAASgB;EACzC;AACA,MAAIhB,SAASiB,eAAe;AAC1Bf,iBAAa,oBAAoB;MAC/BC,iBAAiBH,SAASiB;IAC5B;AACAF,0BAAsBZ,kBAAkBH,SAASiB;EACnD;AACAf,eAAa,0BAA0Ba;AAEvC,MAAIf,SAASkB,WAAW;AACtBhB,iBACE,iHACE;MACFC,iBAAiBH,SAASkB;IAC5B;EACF;AACA,MAAIlB,SAASmB,gBAAgB;AAC3BjB,iBAAa,0BAA0B;MACrCC,iBAAiBH,SAASmB;IAC5B;EACF;AACA,MAAMC,iBAAiBC,WAAWtB,MAAMG,cAAc;IACpDoB,MAAMvB,UAAU;EAClB,CAAC;AAED,MAAMwB,iBAAiBC,eAAeC,OAAOxB,MAAM;AACnD,MAAMyB,YAAY,CAACN,gBAAgBO,mBAAmBJ,cAAc,CAAC;AAErE,SAAOG;AACT;AAEA,IAAA,cAAe5B;",
  "names": ["createTheme", "theme", "settings", "styles", "themeOptions", "backgroundColor", "background", "color", "foreground", "fontFamily", "gutterBackground", "gutterForeground", "gutterBorder", "borderRightColor", "caret", "caretColor", "borderLeftColor", "activeLineGutterStyle", "gutterActiveForeground", "lineHighlight", "selection", "selectionMatch", "themeExtension", "EditorView", "dark", "highlightStyle", "HighlightStyle", "define", "extension", "syntaxHighlighting"]
}
