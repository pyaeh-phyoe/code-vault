{
  "version": 3,
  "names": [
    "EditorView",
    "HighlightStyle",
    "syntaxHighlighting",
    "createTheme",
    "theme",
    "settings",
    "styles",
    "themeOptions",
    "backgroundColor",
    "background",
    "color",
    "foreground",
    "fontFamily",
    "gutterBackground",
    "gutterForeground",
    "gutterBorder",
    "borderRightColor",
    "caret",
    "caretColor",
    "borderLeftColor",
    "activeLineGutterStyle",
    "gutterActiveForeground",
    "lineHighlight",
    "selection",
    "selectionMatch",
    "themeExtension",
    "dark",
    "highlightStyle",
    "define",
    "extension"
  ],
  "sources": [
    "../src/index.tsx"
  ],
  "sourcesContent": [
    "import { EditorView } from '@codemirror/view';\nimport { Extension } from '@codemirror/state';\nimport { HighlightStyle, TagStyle, syntaxHighlighting } from '@codemirror/language';\nimport { StyleSpec } from 'style-mod';\n\nexport interface CreateThemeOptions {\n  /**\n   * Theme inheritance. Determines which styles CodeMirror will apply by default.\n   */\n  theme: Theme;\n  /**\n   * Settings to customize the look of the editor, like background, gutter, selection and others.\n   */\n  settings: Settings;\n  /** Syntax highlighting styles. */\n  styles: TagStyle[];\n}\n\ntype Theme = 'light' | 'dark';\n\nexport interface Settings {\n  /** Editor background. */\n  background: string;\n  /** Default text color. */\n  foreground: string;\n  /** Caret color. */\n  caret?: string;\n  /** Selection background. */\n  selection?: string;\n  /** Selection match background. */\n  selectionMatch?: string;\n  /** Background of highlighted lines. */\n  lineHighlight?: string;\n  /** Gutter background. */\n  gutterBackground?: string;\n  /** Text color inside gutter. */\n  gutterForeground?: string;\n  /** Text active color inside gutter. */\n  gutterActiveForeground?: string;\n  /** Gutter right border color. */\n  gutterBorder?: string;\n  /** set editor font */\n  fontFamily?: string;\n}\n\nexport const createTheme = ({ theme, settings, styles }: CreateThemeOptions): Extension => {\n  const themeOptions: Record<string, StyleSpec> = {\n    '&': {\n      backgroundColor: settings.background,\n      color: settings.foreground,\n    },\n    '.cm-gutters': {},\n  };\n\n  if (settings.fontFamily) {\n    themeOptions['&.cm-editor .cm-scroller'] = {\n      fontFamily: settings.fontFamily,\n    };\n  }\n  if (settings.gutterBackground) {\n    themeOptions['.cm-gutters'].backgroundColor = settings.gutterBackground;\n  }\n  if (settings.gutterForeground) {\n    themeOptions['.cm-gutters'].color = settings.gutterForeground;\n  }\n  if (settings.gutterBorder) {\n    themeOptions['.cm-gutters'].borderRightColor = settings.gutterBorder;\n  }\n\n  if (settings.caret) {\n    themeOptions['.cm-content'] = {\n      caretColor: settings.caret,\n    };\n    themeOptions['.cm-cursor, .cm-dropCursor'] = {\n      borderLeftColor: settings.caret,\n    };\n  }\n  let activeLineGutterStyle: StyleSpec = {};\n  if (settings.gutterActiveForeground) {\n    activeLineGutterStyle.color = settings.gutterActiveForeground;\n  }\n  if (settings.lineHighlight) {\n    themeOptions['.cm-activeLine'] = {\n      backgroundColor: settings.lineHighlight,\n    };\n    activeLineGutterStyle.backgroundColor = settings.lineHighlight;\n  }\n  themeOptions['.cm-activeLineGutter'] = activeLineGutterStyle;\n\n  if (settings.selection) {\n    themeOptions[\n      '&.cm-focused .cm-selectionBackground, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection'\n    ] = {\n      backgroundColor: settings.selection,\n    };\n  }\n  if (settings.selectionMatch) {\n    themeOptions['& .cm-selectionMatch'] = {\n      backgroundColor: settings.selectionMatch,\n    };\n  }\n  const themeExtension = EditorView.theme(themeOptions, {\n    dark: theme === 'dark',\n  });\n\n  const highlightStyle = HighlightStyle.define(styles);\n  const extension = [themeExtension, syntaxHighlighting(highlightStyle)];\n\n  return extension;\n};\n\nexport default createTheme;\n"
  ],
  "mappings": "AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAE7C,SAASC,cAAc,EAAYC,kBAAkB,QAAQ,sBAAsB;AA2CnF,OAAO,IAAMC,WAAW,GAAG,QAAgE;EAAA,IAA/D;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAA2B,CAAC;EACzE,IAAMC,YAAuC,GAAG;IAC9C,GAAG,EAAE;MACHC,eAAe,EAAEH,QAAQ,CAACI,UAAU;MACpCC,KAAK,EAAEL,QAAQ,CAACM;IAClB,CAAC;IACD,aAAa,EAAE,CAAC;EAClB,CAAC;EAED,IAAIN,QAAQ,CAACO,UAAU,EAAE;IACvBL,YAAY,CAAC,0BAA0B,CAAC,GAAG;MACzCK,UAAU,EAAEP,QAAQ,CAACO;IACvB,CAAC;EACH;EACA,IAAIP,QAAQ,CAACQ,gBAAgB,EAAE;IAC7BN,YAAY,CAAC,aAAa,CAAC,CAACC,eAAe,GAAGH,QAAQ,CAACQ,gBAAgB;EACzE;EACA,IAAIR,QAAQ,CAACS,gBAAgB,EAAE;IAC7BP,YAAY,CAAC,aAAa,CAAC,CAACG,KAAK,GAAGL,QAAQ,CAACS,gBAAgB;EAC/D;EACA,IAAIT,QAAQ,CAACU,YAAY,EAAE;IACzBR,YAAY,CAAC,aAAa,CAAC,CAACS,gBAAgB,GAAGX,QAAQ,CAACU,YAAY;EACtE;EAEA,IAAIV,QAAQ,CAACY,KAAK,EAAE;IAClBV,YAAY,CAAC,aAAa,CAAC,GAAG;MAC5BW,UAAU,EAAEb,QAAQ,CAACY;IACvB,CAAC;IACDV,YAAY,CAAC,4BAA4B,CAAC,GAAG;MAC3CY,eAAe,EAAEd,QAAQ,CAACY;IAC5B,CAAC;EACH;EACA,IAAIG,qBAAgC,GAAG,CAAC,CAAC;EACzC,IAAIf,QAAQ,CAACgB,sBAAsB,EAAE;IACnCD,qBAAqB,CAACV,KAAK,GAAGL,QAAQ,CAACgB,sBAAsB;EAC/D;EACA,IAAIhB,QAAQ,CAACiB,aAAa,EAAE;IAC1Bf,YAAY,CAAC,gBAAgB,CAAC,GAAG;MAC/BC,eAAe,EAAEH,QAAQ,CAACiB;IAC5B,CAAC;IACDF,qBAAqB,CAACZ,eAAe,GAAGH,QAAQ,CAACiB,aAAa;EAChE;EACAf,YAAY,CAAC,sBAAsB,CAAC,GAAGa,qBAAqB;EAE5D,IAAIf,QAAQ,CAACkB,SAAS,EAAE;IACtBhB,YAAY,CACV,6GAA6G,CAC9G,GAAG;MACFC,eAAe,EAAEH,QAAQ,CAACkB;IAC5B,CAAC;EACH;EACA,IAAIlB,QAAQ,CAACmB,cAAc,EAAE;IAC3BjB,YAAY,CAAC,sBAAsB,CAAC,GAAG;MACrCC,eAAe,EAAEH,QAAQ,CAACmB;IAC5B,CAAC;EACH;EACA,IAAMC,cAAc,GAAGzB,UAAU,CAACI,KAAK,CAACG,YAAY,EAAE;IACpDmB,IAAI,EAAEtB,KAAK,KAAK;EAClB,CAAC,CAAC;EAEF,IAAMuB,cAAc,GAAG1B,cAAc,CAAC2B,MAAM,CAACtB,MAAM,CAAC;EACpD,IAAMuB,SAAS,GAAG,CAACJ,cAAc,EAAEvB,kBAAkB,CAACyB,cAAc,CAAC,CAAC;EAEtE,OAAOE,SAAS;AAClB,CAAC;AAED,eAAe1B,WAAW"
}